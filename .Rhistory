setwd('~/Desktop/RStuff)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("limma")
browseVignettes("limma")
library(limma)
limmaUsersGuide()
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("annotate")
browseVignettes("annotate")
###################################################
### code chunk number 7: useDataPkgs.Rnw:236-237
###################################################
sessionInfo()
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("graph")
## ----read-biom-examples-------------------------------------------------------
min_dense_file   = system.file("extdata", "min_dense_otu_table.biom",
package = "biomformat")
min_sparse_file  = system.file("extdata", "min_sparse_otu_table.biom",
package = "biomformat")
rich_dense_file  = system.file("extdata", "rich_dense_otu_table.biom",
package = "biomformat")
rich_sparse_file = system.file("extdata", "rich_sparse_otu_table.biom",
package = "biomformat")
min_dense_file   = system.file("extdata", "min_dense_otu_table.biom", package = "biomformat")
rich_dense_char  = system.file("extdata", "rich_dense_char.biom", package = "biomformat")
rich_sparse_char  = system.file("extdata", "rich_sparse_char.biom", package = "biomformat")
x1 = read_biom(min_dense_file)
## ----packages-----------------------------------------------------------------
library("biomformat"); packageVersion("biomformat")
x1 = read_biom(min_dense_file)
x2 = read_biom(min_sparse_file)
x3 = read_biom(rich_dense_file)
x4 = read_biom(rich_sparse_file)
x5 = read_biom(rich_dense_char)
x6 = read_biom(rich_sparse_char)
x1
## ----accessor-examples-table--------------------------------------------------
biom_data(x1)
biom_data(x2)
## ----matrix-coercion----------------------------------------------------------
as(biom_data(x2), "matrix")
## ----observ-meta--------------------------------------------------------------
observation_metadata(x1)
observation_metadata(x2)
observation_metadata(x3)
observation_metadata(x4)[1:2, 1:3]
class(observation_metadata(x4))
## ----plot-examples------------------------------------------------------------
sample_metadata(x1)
sample_metadata(x2)
sample_metadata(x3)
sample_metadata(x4)[1:2, 1:3]
class(sample_metadata(x4))
## ----plot---------------------------------------------------------------------
plot(biom_data(x4))
boxplot(as(biom_data(x4), "vector"))
heatmap(as(biom_data(x4), "matrix"))
## ----write-biom-examples------------------------------------------------------
outfile = tempfile()
write_biom(x4, outfile)
y = read_biom(outfile)
identical(x4, y)
## ----compare-files-diff, eval=FALSE-------------------------------------------
## ----compare-files-diff, eval=FALSE-------------------------------------------
#  # On Unix OSes
## ----compare-files-diff, eval=FALSE-------------------------------------------
#  # On Unix OSes
#  system(paste0("diff ", rich_sparse_file, outfile))
## ----compare-files-diff, eval=FALSE-------------------------------------------
#  # On Unix OSes
#  system(paste0("diff ", rich_sparse_file, outfile))
#  # On windows
## ----read-biom-examples-------------------------------------------------------
min_dense_file   = system.file("extdata", "min_dense_otu_table.biom",
package = "biomformat")
min_sparse_file  = system.file("extdata", "min_sparse_otu_table.biom",
package = "biomformat")
rich_dense_file  = system.file("extdata", "rich_dense_otu_table.biom",
package = "biomformat")
rich_sparse_file = system.file("extdata", "rich_sparse_otu_table.biom",
package = "biomformat")
min_dense_file   = system.file("extdata", "min_dense_otu_table.biom", package = "biomformat")
rich_dense_char  = system.file("extdata", "rich_dense_char.biom", package = "biomformat")
rich_sparse_char  = system.file("extdata", "rich_sparse_char.biom", package = "biomformat")
x1 = read_biom(min_dense_file)
x2 = read_biom(min_sparse_file)
x3 = read_biom(rich_dense_file)
x4 = read_biom(rich_sparse_file)
x5 = read_biom(rich_dense_char)
x6 = read_biom(rich_sparse_char)
x1
## ----accessor-examples-table--------------------------------------------------
biom_data(x1)
biom_data(x2)
## ----matrix-coercion----------------------------------------------------------
as(biom_data(x2), "matrix")
## ----observ-meta--------------------------------------------------------------
observation_metadata(x1)
## ----packages-----------------------------------------------------------------
library("biomformat"); packageVersion("biomformat")
## ----read-biom-examples-------------------------------------------------------
min_dense_file   = system.file("extdata", "min_dense_otu_table.biom",
package = "biomformat")
min_sparse_file  = system.file("extdata", "min_sparse_otu_table.biom",
package = "biomformat")
rich_dense_file  = system.file("extdata", "rich_dense_otu_table.biom",
package = "biomformat")
rich_sparse_file = system.file("extdata", "rich_sparse_otu_table.biom",
package = "biomformat")
min_dense_file   = system.file("extdata", "min_dense_otu_table.biom", package = "biomformat")
rich_dense_char  = system.file("extdata", "rich_dense_char.biom", package = "biomformat")
rich_sparse_char  = system.file("extdata", "rich_sparse_char.biom", package = "biomformat")
x1 = read_biom(min_dense_file)
x2 = read_biom(min_sparse_file)
x3 = read_biom(rich_dense_file)
x4 = read_biom(rich_sparse_file)
x5 = read_biom(rich_dense_char)
x6 = read_biom(rich_sparse_char)
x1
## ----accessor-examples-table--------------------------------------------------
biom_data(x1)
biom_data(x2)
## ----matrix-coercion----------------------------------------------------------
as(biom_data(x2), "matrix")
## ----observ-meta--------------------------------------------------------------
observation_metadata(x1)
observation_metadata(x2)
observation_metadata(x3)
observation_metadata(x4)[1:2, 1:3]
class(observation_metadata(x4))
## ----plot-examples------------------------------------------------------------
sample_metadata(x1)
sample_metadata(x2)
sample_metadata(x3)
sample_metadata(x4)[1:2, 1:3]
class(sample_metadata(x4))
## ----plot---------------------------------------------------------------------
plot(biom_data(x4))
boxplot(as(biom_data(x4), "vector"))
heatmap(as(biom_data(x4), "matrix"))
###################################################
### code chunk number 2: prettyOutput.Rnw:82-85
###################################################
library("annotate")
data(sample.ExpressionSet)
igenes <- featureNames(sample.ExpressionSet)[246:260]
###################################################
### code chunk number 3: prettyOutput.Rnw:89-98
###################################################
ug <- c("Hs.169284 // ---", "Hs.268515 // full length", "Hs.103419 // full length", "Hs.380429 // ---" ,"--- // ---",
"Hs.169331 // full length", "Hs.381231 // full length", "Hs.283781 // full length", "--- // ---", "--- // ---",
"Hs.3195 // full length", "--- // ---", "Hs.176660 // full length", "Hs.272484 // full length", "Hs.372679 // full length")
ll <- c("221823", "4330", "9637", "---", "---", "6331", "841", "27335", "---", "---", "6375", "---", "2543", "2578", "2215")
gb <- c("M57423", "Z70218", "L17328", "S81916", "U63332", "M77235", "X98175", "AB019392", "J03071", "D25272", "D63789",
"D63789", "U19142", "U19147", "X16863")
sp <- c("P21108", "Q10571", "Q9UHY8", "Q16444", "---", "Q14524 /// Q8IZC9 /// Q8WTQ6 /// Q8WWN5 /// Q96J69", "Q14790", "Q9UBQ5",
"---", "---", "P47992", "---", "Q13065 /// Q8IYC5", "Q13070", "O75015")
###################################################
### code chunk number 4: prettyOutput.Rnw:117-119
###################################################
gb
ll
###################################################
### code chunk number 5: prettyOutput.Rnw:127-130
###################################################
ug
ug <- sub(" //.*$", "", ug)
ug
###################################################
### code chunk number 6: prettyOutput.Rnw:141-144
###################################################
sp
sp <- strsplit(sub("---","&nbsp;",as.character(sp)), "///")
sp
###################################################
### code chunk number 7: expDat
###################################################
dat <- exprs(sample.ExpressionSet)[igenes,1:10]
FC <- rowMeans(dat[igenes,1:5]) - rowMeans(dat[igenes,6:10])
pval <- esApply(sample.ExpressionSet[igenes,1:10], 1, function(x) t.test(x[1:5], x[6:10])$p.value)
tstat <- esApply(sample.ExpressionSet[igenes,1:10], 1, function(x) t.test(x[1:5], x[6:10])$statistic)
###################################################
### code chunk number 8: prettyOutput.Rnw:170-177
###################################################
name <- c("hypothetical protein LOC221823",
"meningioma (disrupted in balanced translocation) 1",
"fasciculation and elongation protein zeta 2 (zygin II)",
"Phosphoglycerate kinase {alternatively spliced}",
"---","sodium channel, voltage-gated, type V, alpha polypeptide",
"caspase 8, apoptosis-related cysteine protease","muscle specific gene","---","---","chemokine (C motif) ligand 1",
"---","G antigen 1","G antigen 6","Fc fragment of IgG, low affinity IIIb, receptor for (CD16)")
###################################################
### code chunk number 9: prettyOutput.Rnw:179-182
###################################################
name
name <- gsub("---", "&nbsp;", name)
name
###################################################
### code chunk number 10: buildTable
###################################################
genelist <- list(igenes, ug, ll, gb, sp)
filename <- "Interesting_genes.html"
title <- "An Artificial Set of Interesting Genes"
othernames <- list(name, round(tstat, 2), round(pval, 3), round(FC, 1), round(dat, 2))
head <- c("Probe ID", "UniGene", "LocusLink", "GenBank", "SwissProt", "Gene Name", "t-statistic", "p-value",
"Fold Change", "Sample 1", "Sample 2", "Sample 3", "Sample 4", "Sample 5", "Sample 6",
"Sample 7", "Sample 8", "Sample 9", "Sample 10")
repository <- list("affy", "ug", "en", "gb", "sp")
htmlpage(genelist, filename, title, othernames, head, repository = repository)
BiocManager::install("maftools")
BiocManager::install("maftools")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("maftools")
library(maftools)
BiocManager::install("maftools")
library(maftools)
version()
BiocManager::install("maftools")
BiocManager::install("maftools")
library(maftools)
list.files(system.file('extdata', package = 'maftools'))
install.packages("devtools")
devtools::install_github(repo = "PoisonAlien/TCGAmutations")
library(TCGAmutations)
tcga_available()
library(maftools)
list.files(system.file('extdata', package = 'maftools'))
devtools::install_github(repo = "PoisonAlien/TCGAmutations")
library(TCGAmutations)
tcga_available()
tgct = tcga_load(study = "ACC")
#Commands for studying ACC
ACC = tcga_load(study = "ACC")
ACC
plot.new()
plotmafSummary(maf = ACC, rmOutlier = TRUE, addStat = 'median', dashboard = TRUE, titvRaw = FALSE)
plot.new()
oncoplot(maf = ACC, top = 15, fontSize = 1)
#plot for TP53, most frequent mutated gene in ACC
plotProtein(gene = 'TP53')
#Commands for studying THCA
THCA = tcga_load(study = "THCA")
THCA
#MAF Summary
plot.new()
plotmafSummary(maf = THCA, rmOutlier = TRUE, addStat = 'median', dahsboard = TRUE, titvRaw = FALSE)
plotmafSummary(maf = THCA, rmOutlier = TRUE, addStat = 'median', dashboard = TRUE, titvRaw = FALSE)
#Top 15 Mutated Genes
plot.new()
oncoplot(maf = THCA, top = 15, fontSize = 1)
#plot for TP53, most frequent mutated gene in ACC (Only a single transcript exists for this gene)
plotProtein(gene = 'BRAF')
library(ggfortify)
CNV <- read.table('~/Desktop/RStuff/Activity_3A/hm3_cnv_submission.txt', header = TRUE, sep = "\t")
CEU <- read.table('~/Desktop/RStuff/Activity_3A/CEU_samples.txt', header = TRUE, sep = "\t")
CHB <- read.table('~/Desktop/RStuff/Activity_3A/CHB_samples.txt', header = TRUE, sep = "\t")
YRI <- read.table('~/Desktop/RStuff/Activity_3A/YRI_samples.txt', header = TRUE, sep = "\t")
JPT <- read.table('~/Desktop/RStuff/Activity_3A/JPT_samples.txt', header = TRUE, sep = "\t")
CNV <- CNV[-c(2:4)]
row.names(CNV) <- CNV$cnp_id
CNV <- CNV[-c(1)]
View(CNV)
CNV <- t(CNV)
CNV <- as.data.frame(CNV)
CNV$Samples <- rownames(CNV)
CNV$Group <- NA
CNV$Group <- ifelse(CNV$Samples %in% CEU$V1, "CEU",
ifelse (CNV$Samples %in% CHB$V1, "CHB",
ifelse(CNV$Samples %in% JPT$V1, "JPT",
ifelse(CNV$Samples %in% YRI$V1, "YRI", "Unknown"))))
cnv.data <- CNV[c(1:856)]
cnv.data[is.na(cna.data)] <- 2
cnv.data[is.na(cnv.data)] <- 2
autoplot(prcomp(cnv.data))
autoplot(prcomp(cnv.data), data = CNV, colour = 'Group')
autoplot(prcomp(cnv.data))
autoplot(prcomp(cnv.data), data = CNV, color = 'Group')
autoplot(prcomp(cnv.data), data = CNV, colour = 'Group')
cnv.data <- CNV[c(1:856)]
cnv.data[is.na(cnv.data)] <- 2
autoplot(prcomp(cnv.data))
autoplot(prcomp(cnv.data), data = CNV, colour = 'Group')
CNV <- read.table('~/Desktop/RStuff/Activity_3A/hm3_cnv_submission.txt', header=TRUE, sep="\t")
CNV <- CNV[-c(2:4)]
row.names(CNV) <- CNV$cnp_id
CNV <- CNV[-c(1)]
CNV <- t(CNV)
CNV <- as.data.frame(CNV)
CNV[is.na(CNV)] <- 2
CNV <- scale(CNV)
head(CNV, n =3)
dist.eclu <- dist(CNV, method = "euclidean")
install.packages("factoextra")
library(factoextra)
library(ggplot2)
dist.cor <- get_dist(CNV, method = "pearson")
fviz_nbclust(CNV, kmeans, method = "silhouette")
dist.eucl <- dist(CNV, method = "euclidean")
dist.cor <- get_dist(CNV, method = "pearson")
hclust.ward.eucl <- hclust(d = dist.eucl, method = "ward.D2")
hclust.ward.cor <- hclust(d = dist.cor, method = "ward.D2")
hclust.complete.eucl <- hclust(d = dist.eucl, method ="complete")
hclust.complete.cor <- hclust(d = dist.cor, method ="complete")
plot(hclust.ward.eucl, labels =FALSE, main ="Euclidian - Ward's")
plot(hclust.ward.cor, labels = FALSE, main ="Correlation -Ward's")
plot(hclust.ward.cor, labels = FALSE, main ="Correlation - Ward's")
plot(hclust.complete.eucl, labels = FALSE, main ="Euclidian - Complete")
plot(hclust.complete.cor, labels = FALSE, main ="Correlation - Complete")
fviz_nbclust(hclust.ward.eucl, k = 3, labels= FALSE, k_colors = c("#2E9FDF", "E7B800", "#FC4E07"), color_labels_by_k = TRUE, rect = TRUE)
fviz_dend(hclust.ward.eucl, k = 3, labels= FALSE, k_colors = c("#2E9FDF", "E7B800", "#FC4E07"), color_labels_by_k = TRUE, rect = TRUE)
fviz_dend(hclust.ward.eucl, k = 3,
labels= FALSE,
k_colors = c("#2E9FDF", "E7B800", "#FC4E07"),
color_labels_by_k = TRUE,
rect = TRUE)
library(factoextra)
library(ggplot2)
(hclust.ward.eucl, k = 3,
(hclust.ward.eucl k = 3,
fviz_dend(hclust.ward.eucl, k = 3,
labels= FALSE,
k_colors = c("#2E9FDF", "E7B800", "#FC4E07"),
color_labels_by_k = TRUE,
rect = TRUE)
fviz_dend(hclust.ward.eucl, k = 3,
labels= FALSE,
k_colors = c("#2E9FDF", "#E7B800", "#FC4E07"),
color_labels_by_k = TRUE,
rect = TRUE)
fviz_dend(hclust.ward.eucl, k = 4,
labels= FALSE,
k_colors = c("#47AB2C", "#752CAB", "#0BF3D3", "#F30BC5"),
color_labels_by_k = TRUE,
rect = TRUE)
library(DESeq2)
library(dplyr)
setwd("/Users/bigyambat/Documents/GitHub/TRGN510_FinalProject")
#Data Wrangling
Star_Matrix <- read.csv(file = 'CSV_Manifest3.csv', header = TRUE)
#Removing irrelavent unstranded reads (ie )
Star_Matrix2 <- Star_Matrix[-(1:4),]
clinical_sample <- read.csv(file = 'clinical.tsv', sep = "\t", header = TRUE)
clinical_sample2 <- clinical_sample[c(rep(FALSE,1),TRUE), ]
rownames(clinical_sample2) <- 1:nrow(clinical_sample2)
View(Star_Matrix2)
#Reading Sample Name files which has all the different formats/names for each sample
Sample_Name_File <- read.csv(file = 'gdc_sample_sheet.2022-11-21.tsv', sep = "\t", header = TRUE)
View(Sample_Name_File)
#Selecing for File name & case.id columns
Sample_Name_File2 = subset(Sample_Name_File, select = -c(1, 3:5, 7:8) )
View(Sample_Name_File2)
View(Star_Matrix2)
View(clinical_sample2)
View(Sample_Name_File)
View(Star_Matrix)
Star_Matrix <- read.csv(file = 'CSV_Manifest3.csv', header = FALSE)
View(Star_Matrix)
#
colnames(Star_Matrix) <- Star_Matrix[1,]
View(Star_Matrix)
Star_Matrix <- Star_Matrix[-1,]
View(Star_Matrix)
#Removing irrelavent unstranded reads (ie )
Star_Matrix2 <- Star_Matrix[-(1:4),]
clinical_sample <- read.csv(file = 'clinical.tsv', sep = "\t", header = TRUE)
clinical_sample2 <- clinical_sample[c(rep(FALSE,1),TRUE), ]
rownames(clinical_sample2) <- 1:nrow(clinical_sample2)
#####################################################################################
#Sample_ID & Case_ID correlation
#Reading Sample Name files which has all the different formats/names for each sample
Sample_Name_File <- read.csv(file = 'gdc_sample_sheet.2022-11-21.tsv', sep = "\t", header = TRUE)
#Selecing for File name & case.id columns
Sample_Name_File2 = subset(Sample_Name_File, select = -c(1, 3:5, 7:8) )
#Changing Case.ID Column to "case_submitter_id" to match Star_Matrix column
colnames(Sample_Name_File2) <- c("File.Name", "case_submitter_id")
View(Sample_Name_File2)
for (colnames in Star_Matrix2) {
if (colnames(Star_Matrix2) = Sample_Name_File2$File.Name) {
for (colnames in Star_Matrix2) {
if (colnames(Star_Matrix2) == Sample_Name_File2$File.Name) {
Star_Matrix3 <- col(Star_Matrix2) <- Sample_Name_File2$File.Name
}
}
for (colnames in Star_Matrix2) {
ifelse(colnames(Star_Matrix2) == Sample_Name_File2$File.Name) {
for (colnames in Star_Matrix2) {
ifelse(colnames(Star_Matrix2) == Sample_Name_File2$File.Name)
Star_Matrix3 <- col(Star_Matrix2) <- Sample_Name_File2$File.Name
}
for (colnames in Star_Matrix2) {
ifelse(colnames(Star_Matrix2) == Sample_Name_File2$File.Name, yes)
Star_Matrix3 <- col(Star_Matrix2) <- Sample_Name_File2$File.Name
}
for (colnames in Star_Matrix2) {
ifelse(colnames(Star_Matrix2) == Sample_Name_File2$File.Name, yes, no)
Star_Matrix3 <- col(Star_Matrix2) <- Sample_Name_File2$File.Name
}
for (i in colnames(Star_Matrix2) {
for (i in colnames(Star_Matrix2)
ifelse(colnames(Star_Matrix2) == Sample_Name_File2$File.Name, yes, no) {
View(Sample_Name_File)
View(Star_Matrix)
for (i in Star_Matrix2) {
if(colnames(Star_Matrix2) == Sample_Name_File2$File.Name)
colnames(Star_Matrix2) <- Sample_Name_File2$case_submitter_id
}
colnames(Star_Matrix2) <- c("gene_id","TCGA-P7-A5NX","TCGA-SP-A6QC", "TCGA-S7-A7WL", "TCGA-WB-A817", "TCGA-W2-A7H7", "TCGA-WB-A81T", "TCGA-S7-A7WN", "TCGA-QR-A70O", "TCGA-XG-A823", "TCGA-WB-A81G", "TCGA-S7-A7WW", "TCGA-SR-A6MZ", "TCGA-QR-A707", "TCGA-QR-A70E", "TCGA-QR-A703", "TCGA-QR-A70V", "TCGA-QR-A70K", "TCGA-P8-A5KC", "TCGA-WB-A81D", "TCGA-WB-A81W", "TCGA-S7-A7X2", "TCGA-QR-A6ZZ", "TCGA-QR-A700", "TCGA-QR-A6GR", "TCGA-WB-A80L", "TCGA-QR-A70A", "TCGA-S7-A7WO", "TCGA-WB-A81R", "TCGA-P7-A5NY", "TCGA-RW-A68G", "TCGA-RW-A67W", "TCGA-WB-A81P", "TCGA-RW-A681", "TCGA-SR-A6N0", "TCGA-RW-A686", "TCGA-WB-A816", "TCGA-P7-A5NY", "TCGA-RW-A68F", "TCGA-RW-A68A", "TCGA-W2-A7H5", "TCGA-SR-A6MS", "TCGA-WB-A815", "TCGA-SR-A6MV", "TCGA-WB-A80Q", "TCGA-WB-A822", "TCGA-S7-A7WP", "TCGA-SP-A6QK", "TCGA-QR-A6GY", "TCGA-W2-A7HF", "TCGA-RW-A686", "TCGA-SR-A6MP", "TCGA-WB-A81F", "TCGA-WB-A81M", "TCGA-P8-A6RY", "TCGA-SR-A6MT", "TCGA-W2-A7HD", "TCGA-SQ-A6I4", "TCGA-WB-A80K", "TCGA-RW-A685", "TCGA-QR-A6GZ", "TCGA-WB-A80V", "TCGA-WB-A818", "TCGA-RW-A68D", "TCGA-S7-A7WM", "TCGA-RW-A68C", "TCGA-W2-A7HA", "TCGA-QT-A5XL", "TCGA-QR-A70M", "TCGA-WB-A81J", "TCGA-RW-A67X", "TCGA-QR-A6GO", "TCGA-QR-A70G", "TCGA-RW-A68B", "TCGA-QR-A70C", "TCGA-QR-A6GU", "TCGA-WB-A80M", "TCGA-WB-A80O", "TCGA-PR-A5PH", "TCGA-QR-A70W", "TCGA-TT-A6YJ", "TCGA-WB-A80N", "TCGA-QT-A5XP", "TCGA-S7-A7WX", "TCGA-SP-A6QI", "TCGA-RT-A6YC", "TCGA-SP-A6QD", "TCGA-QR-A70N", "TCGA-RW-A688", "TCGA-QR-A6GS", "TCGA-S7-A7WR", "TCGA-TT-A6YP", "TCGA-QT-A5XO", "TCGA-WB-A81K", "TCGA-WB-A81V", "TCGA-TT-A6YN", "TCGA-QT-A5XM", "TCGA-SP-A6QF", "TCGA-WB-A81H", "TCGA-SQ-A6I4","TCGA-SR-A6MY", "TCGA-S7-A7WV", "TCGA-QR-A6H4", "TCGA-QR-A6H2", "TCGA-W2-A7HE", "TCGA-QR-A6GX", "TCGA-SR-A6MU", "TCGA-P8-A5KC","TCGA-TT-A6YO", "TCGA-W2-A7HC", "TCGA-SP-A6QH", "TCGA-QT-A5XK", "TCGA-QR-A6H1", "TCGA-WB-A81S", "TCGA-QR-A70R", "TCGA-WB-A821", "TCGA-S7-A7X1", "TCGA-RW-A684", "TCGA-QR-A70H", "TCGA-QR-A6H5", "TCGA-QR-A70U", "TCGA-QR-A7IN", "TCGA-P8-A5KD", "TCGA-QR-A70J", "TCGA-WB-A81I", "TCGA-WB-A81N", "TCGA-P8-A5KD", "TCGA-RT-A6YA", "TCGA-QR-A708", "TCGA-QT-A69Q", "TCGA-S7-A7WT", "TCGA-PR-A5PF", "TCGA-QR-A6GW", "TCGA-SQ-A6I6", "TCGA-WB-A81A", "TCGA-RW-A67Y", "TCGA-WB-A819", "TCGA-QR-A70X", "TCGA-QR-A6GZ", "TCGA-RW-A67V", "TCGA-QT-A5XJ", "TCGA-W2-A7UY", "TCGA-SP-A6QJ", "TCGA-PR-A5PG", "TCGA-W2-A7HB", "TCGA-RT-A6Y9", "TCGA-S7-A7WU", "TCGA-S7-A7WQ", "TCGA-RW-A689", "TCGA-QT-A5XN")
View(Star_Matrix2)
